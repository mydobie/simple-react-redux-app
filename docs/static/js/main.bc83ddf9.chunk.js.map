{"version":3,"sources":["feature-flags.config.ts","AppRouteNames.ts","js/whichEnv.ts","AppNavBar.tsx","pages/Home.tsx","components/DinoListItem.tsx","components/DinoList.tsx","redux/selectors/dinos.ts","components/Alert.tsx","components/Loading.tsx","js/axios.config.ts","redux/reducers/dinos.ts","pages/Dino.tsx","pages/Version.tsx","js/getVersion.ts","pages/ColorPage.tsx","pages/RedirectPage.tsx","pages/UniversityPages.tsx","images/page_not_found.svg","pages/FourOhFour.tsx","AppRoutes.tsx","components/SetAxios.tsx","index.tsx","App.tsx","redux/reducers/REDUCER_TEMPLATE.ts","redux/reducers/index.ts","redux/store.ts"],"names":["featureFlagArray","id","active","description","colorName","envTypes","dev","ci","test","stage","prod","environments","urlpattern","env","isProd","host","window","location","hostname","some","includes","activeClass","isActive","AppNavBar","Nav","Item","className","to","ROUTES","Home","Row","Col","Card","bg","text","Body","DinoListItem","dinoName","dinoId","checked","changeCheckBox","testid","Form","Check","onClick","e","target","defaultChecked","label","Li","styled","li","DinoList","selectedDinos","useSelector","state","dinos","data","filter","dino","selected","style","margin","map","Errors","errorArray","children","title","type","displayAsHTML","buildFromArray","error","index","dangerouslySetInnerHTML","__html","Alert","variant","length","Loading","size","color","display","Spinner","undefined","width","height","animation","role","dinoAPI","numberOfDinos","universitiesAPI","sleep","time","Promise","resolve","setTimeout","ajaxFinally","a","func","timeout","envVariable","process","console","info","initialState","loading","loadDinos","createAsyncThunk","_","rejectWithValue","axiosConfig","url","method","axios","response","DinosSlice","createSlice","name","reducers","setDinoSelection","action","payload","newDinos","resetDinoStore","extraReducers","builder","addCase","fulfilled","forEach","d","push","pending","rejected","isLocalHost","actions","SampleDinoPage","dispatch","useDispatch","React","useEffect","dinoList","Version","getVersionsConfig","useState","version","setVersion","isLoading","setIsLoading","source","CancelToken","getVersions","cancelToken","token","Error","cancel","useGetVersion","bootstrap","featureFlags","readonly","ColorPage","acceptedColors","useParams","setColor","isInvalid","setIsInvalid","isValid","setIsValid","onColorChange","enteredColor","c","toLowerCase","Group","controlId","Label","Control","value","onChange","event","Feedback","paddingTop","button","Button","disabled","colorButton","RedirectPage","navigate","useNavigate","count","setCount","timer","setInterval","clearInterval","RawJSON","json","Header","Text","UniversityPage","setLoading","setError","univList","setUnivList","raw","setRaw","loadUniversities","universities","university","JSON","stringify","FourOhFour","textAlign","src","notFoundImage","alt","AppRoutes","path","element","Dino","SetAxios","clearError","testResponse","testMode","setAxiosHeaders","interceptors","request","use","config","reject","status","UNKNOWN_ERROR","RenderApp","Router","HashRouter","Title","Footer","isColors","isFeatureActive","marginTop","App","loadFeatureFlagsRedux","features","overrides","parse","REACT_APP_FEATURE_FLAGS","persist","basename","Container","sampleAjaxCall","SampleSlice","resetStore","combineReducers","FeatureFlags","featureFlagsReducers","sample","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc83ddf9.chunk.js","sourcesContent":["import { FlagType } from 'feature-flags';\n/* ****************** FEATURE FLAG CODES **************** */\n/*\nAdd all feature flag ids as constants so it can be used across the application.\nFor example:\n\nexport const COLORS = 'COLORS';\n*/\nexport const COLORS = 'COLORS';\n\n/* ****************** FEATURE FLAG  ARRAY ************** */\n/*\nAdd all feature flags in the following format:\n[\n  {\n    id: COLORS,  // id used across the app for this feature\n    inuse: false, // should the feature be enabled?\n    description: 'A list of all the primary and secondary colors.', // description shown for this feature\n  },\n  ...\n]\n*/\n\nexport const featureFlagArray: [FlagType] | [] = [\n  {\n    id: COLORS, // id used across the app for this feature\n    active: false, // should the feature be enabled?\n    description: 'A list of all the primary and secondary colors.', // description shown for this feature\n  },\n];\n","export default {\n  HOME: '/',\n  VERSION: '/version',\n  FEATURE_FLAGS: '/features',\n  DINO: '/dino',\n\n  //  EXAMPLE Route with values in url\n  //  NOTE: the ? marks an optional value\n  COLOR: (colorName: string | null = null): string =>\n    colorName ? `/color/:${colorName}?` : '/color',\n\n  REDIRECT: '/redirect',\n  UNIVERSITIES: '/universities',\n};\n","// *********************** GET ENVIRONMENT BASED ON URL ************************* //\n// Add non-prod environments here:\n\nconst envTypes = {\n  dev: 'dev',\n  ci: 'ci',\n  test: 'test',\n  stage: 'stage',\n  prod: 'prod',\n};\n\nconst environments = [\n  { urlpattern: 'localhost', env: envTypes.dev },\n  { urlpattern: '127.0.0.1', env: envTypes.dev },\n  { urlpattern: 'dev.', env: envTypes.dev },\n  { urlpattern: 'development.', env: envTypes.dev },\n  { urlpattern: 'test.', env: envTypes.test },\n  { urlpattern: 'tst.', env: envTypes.test },\n  { urlpattern: 'ci.', env: envTypes.ci },\n  { urlpattern: 'qa.', env: envTypes.stage },\n  { urlpattern: 'qat.', env: envTypes.stage },\n  { urlpattern: 'stage.', env: envTypes.stage },\n  { urlpattern: 'staging.', env: envTypes.stage },\n];\n\nexport const isProd = (): boolean => {\n  const host = window.location.hostname;\n  return !environments.some((env) => host.includes(env.urlpattern));\n};\n\nexport const whichEnvString = (): string => {\n  // Handy for debugging and printing to console\n  const host = window.location.hostname;\n  const found = environments.find((env) => host.includes(env.urlpattern));\n  return `Hostname: ${host}, Environment: ${\n    found === undefined ? 'production' : found.env\n  }`;\n};\n\nconst isEnv = (envType: string): boolean => {\n  const host = window.location.hostname;\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if (!envTypes[envType]) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Environment ${envType} sent to \"isEnv\" helper function is unknown.`\n    );\n  }\n\n  return environments.some(\n    (env) => host.includes(env.urlpattern) && env.env === envType\n  );\n};\n\nexport const isDev = (): boolean => isEnv(envTypes.dev);\n\nexport const isCI = (): boolean => isEnv(envTypes.ci);\n\nexport const isTest = (): boolean => isEnv(envTypes.test);\n\nexport const isStage = (): boolean => isEnv(envTypes.stage);\n\nexport const isLocalHost = (): boolean => {\n  const host = window.location.hostname;\n  return host.includes('localhost') || host.includes('127.0.0.1');\n};\n","// Main navigation bar\n\nimport React, { ReactElement } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Nav } from 'react-bootstrap';\n\nimport ROUTES from './AppRouteNames';\nimport { isProd } from './js/whichEnv';\n\nconst activeClass = (isActive: boolean) =>\n  `nav-link ${isActive ? 'active' : ''}`;\n\n// EXAMPLE: Navigation bar\nconst AppNavBar = (): ReactElement => (\n  <nav>\n    <Nav>\n      <Nav.Item>\n        <NavLink\n          className={({ isActive }) => activeClass(isActive)}\n          to={ROUTES.HOME}\n          //  style={({ isActive }) => (isActive ? {textDecoration: 'underline'} : undefined)}\n        >\n          Home\n        </NavLink>\n      </Nav.Item>\n\n      <Nav.Item>\n        <NavLink\n          to={ROUTES.DINO}\n          className={({ isActive }) => activeClass(isActive)}\n        >\n          Dino (sample Redux page)\n        </NavLink>\n      </Nav.Item>\n\n      <Nav.Item>\n        <NavLink\n          className={({ isActive }) => activeClass(isActive)}\n          to={ROUTES.COLOR()}\n        >\n          Color Page (Simple form)\n        </NavLink>\n      </Nav.Item>\n\n      <Nav.Item>\n        <NavLink\n          className={({ isActive }) => activeClass(isActive)}\n          to={ROUTES.UNIVERSITIES}\n        >\n          MN Universities\n        </NavLink>\n      </Nav.Item>\n\n      <Nav.Item>\n        <NavLink\n          className={({ isActive }) => activeClass(isActive)}\n          to={ROUTES.REDIRECT}\n        >\n          Redirect\n        </NavLink>\n      </Nav.Item>\n\n      {!isProd() ? (\n        <Nav.Item>\n          <NavLink\n            className={({ isActive }) => activeClass(isActive)}\n            to={ROUTES.FEATURE_FLAGS}\n          >\n            Feature flags\n          </NavLink>\n        </Nav.Item>\n      ) : null}\n      <Nav.Item>\n        <NavLink\n          className={({ isActive }) => activeClass(isActive)}\n          to={ROUTES.VERSION}\n        >\n          Version\n        </NavLink>\n      </Nav.Item>\n    </Nav>\n  </nav>\n);\n\nexport default AppNavBar;\n","// NOTE This is a sample page and should either be\n// modified or removed from a real project\n\nimport React, { ReactElement } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\n\n// *** Main component ***\nconst Home = (): ReactElement => (\n  <Row data-testid='homePageContainer'>\n    <Col>\n      <Card bg='secondary' text='white'>\n        <Card.Body>\n          <h1>Sample Application </h1>\n          <p>This is the home page for an application</p>\n        </Card.Body>\n      </Card>\n      <p>\n        This project can be used as template when starting other React/Redux\n        projects.\n      </p>\n    </Col>\n  </Row>\n);\n\nexport default Home;\n","import React, { ReactElement } from 'react';\nimport { Form } from 'react-bootstrap';\n\n// ** Main component type */\ntype DinoListItemProps = {\n  dinoName: string;\n  dinoId: string;\n  checked: boolean;\n  // EXAMPLE: Passing a function as a prop (so data bubbles to parent)\n  changeCheckBox: (dinoId: string, isChecked: boolean) => void;\n  testid?: string;\n};\n\n// *** Main component ***\nconst DinoListItem = ({\n  dinoName,\n  dinoId,\n  checked,\n  changeCheckBox,\n  testid,\n}: DinoListItemProps): ReactElement => (\n  <li data-testid={testid}>\n    {/* EXAMPLE: Checkbox with label */}\n    <Form.Check\n      onClick={(e) => {\n        changeCheckBox(dinoId, (e.target as HTMLInputElement).checked);\n      }}\n      id={`cb_${dinoId}`}\n      defaultChecked={checked}\n      label={dinoName}\n    />\n  </li>\n);\n\nexport default DinoListItem;\n","import React, { ReactElement } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport styled from 'styled-components';\n\n// *** Import selectors ***\nimport { useGetSelectedDinos } from '../redux/selectors/dinos';\n\n// EXAMPLE: Using styled-components\nconst Li = styled.li`\n  font-size: 20px;\n  color: #7b027b;\n  font-family: serif;\n  border-bottom: 1px solid #ccc;\n`;\n\n// *** Main component ***\nconst DinoList = (): ReactElement => {\n  // *** Selectors ***\n  const selectedDinos = useGetSelectedDinos();\n\n  // *** Return ***\n  return (\n    <div>\n      <Row>\n        <Col>\n          <h2>Your selected Dinos:</h2>\n          <ul data-testid='dinoSelectedList' style={{ margin: '30px' }}>\n            {/* EXAMPLE: Using map to display items from an array */}\n            {selectedDinos.map((dino) => (\n              <Li key={dino.id}>{dino.text}</Li>\n            ))}\n          </ul>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default DinoList;\n","/*\nSelectors pull data from the redux store so individual components\ndon't need to know the store structure\n\nThese selectors are actually custom hooks and must start with \"use\"\n*/\n\nimport { RootState } from '../store';\nimport { DinoType } from '../reducers/dinos';\nimport { useSelector } from 'react-redux';\n\nexport const useIsDinoLoading = (): boolean =>\n  useSelector((state: RootState) => state.dinos.loading);\n\n// EXAMPLE: Selector (pulling information out of the redux store)\nexport const useGetDinos = (): DinoType[] =>\n  useSelector((state: RootState) => state.dinos.data);\n\nexport const useGetDinoErrors = (): string | null =>\n  useSelector((state: RootState) => state.dinos.error);\n\nexport const useGetSelectedDinos = (): DinoType[] =>\n  useSelector((state: RootState) =>\n    state.dinos.data.filter((dino: DinoType) => dino.selected === true)\n  );\n","/* \nThis component takes errors, warnings, or success messages\n*/\n\nimport React, { ReactElement } from 'react';\nimport { Alert } from 'react-bootstrap';\n\n// ** Main component types */\nexport type ErrorType =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'danger'\n  | 'warning'\n  | 'info'\n  | 'light'\n  | 'dark';\n\ntype ErrorComponentProps = {\n  errorArray?: string[];\n  children?: ReactElement | string | null;\n  title?: string;\n  type?: ErrorType;\n  displayAsHTML?: boolean;\n};\n\n// *** Main component ***\nconst Errors = ({\n  errorArray = [],\n  children = null,\n  title = '',\n  type = 'danger',\n  displayAsHTML = false,\n}: ErrorComponentProps): ReactElement => {\n  const buildFromArray = errorArray.map((error, index) =>\n    displayAsHTML === true ? (\n      <li key={index} dangerouslySetInnerHTML={{ __html: error }} />\n    ) : (\n      <li key={index}>{error}</li>\n    )\n  );\n\n  // *** Return ***\n  return (\n    <Alert variant={type} data-testid='alertError'>\n      {title !== '' ? <h2 className='alertTitle'>{title}</h2> : null}\n      {children}\n      {buildFromArray.length > 0 ? <ul>{buildFromArray}</ul> : null}\n    </Alert>\n  );\n};\n\nexport default Errors;\n","/*\nSimple component to display a loading icon\n*/\n\nimport React, { ReactElement } from 'react';\nimport { Spinner } from 'react-bootstrap';\n\n// ** Main component  type */\ntype LoadingProps = {\n  size?: string;\n  color?: string;\n  children?: ReactElement | string;\n};\n\n// *** Main component ***\nconst Loading = ({\n  size = '60px',\n  color = 'secondary',\n  children = 'Loading',\n}: LoadingProps): ReactElement => (\n  <div style={{ display: 'inline-block' }} data-testid='Loading'>\n    <Spinner\n      style={size === 'sm' ? undefined : { width: size, height: size }}\n      variant={color}\n      animation='border'\n      role='status'\n      size={size === 'sm' ? size : undefined}\n    >\n      <span className='sr-only visually-hidden'>{children}</span>\n    </Spinner>\n  </div>\n);\n\nexport default Loading;\n","// AJAX CONFIGS.  Add a separate export for each ajax call\nimport { Method } from 'axios';\n\n/* ************ API CALLS ************* */\nexport const sampleAPI = {\n  method: (): Method => 'get',\n  url: (): string =>\n    process.env.REACT_APP_USE_MOCKS === 'true'\n      ? `/__fixtures__/SAMPLE_FIXTURE.json` // NOTE: `__fixtures__` is the  `/public/__fixtures__` directory.\n      : `http://the_real_url_for_the_api.com`,\n};\n\nexport const dinoAPI = {\n  method: (): Method => 'get',\n  url: (numberOfDinos = 5): string =>\n    process.env.REACT_APP_USE_MOCKS === 'true'\n      ? `/__fixtures__/dinoipsum.json?words=${numberOfDinos}` // NOTE: `__fixtures__` is the  `/public/__fixtures__` directory.\n      : `http://dinoipsum.herokuapp.com/api/?format=json&paragraphs=1&words=${numberOfDinos}`,\n};\n\nexport const universitiesAPI = {\n  method: (): Method => 'get',\n  url: (): string =>\n    process.env.REACT_APP_USE_MOCKS === 'true'\n      ? `/__fixtures__/universities.json` // NOTE: `__fixtures__` is the  `/public/__fixtures__` directory.\n      : `http://universities.hipolabs.com/search?name=minnesota&country=united+states`,\n};\n\n/* ***************** AJAX Finally Helper ***************/\n// When set in \"mock mode\" the application will pause simulating a real ajax call\n\nconst sleep = (time: number) =>\n  new Promise((resolve) => setTimeout(resolve, time));\n\nexport const ajaxFinally = async (\n  func: () => void = () => {},\n  timeout = 3000,\n  envVariable = 'REACT_APP_USE_MOCKS'\n): Promise<void> => {\n  if (process.env[envVariable] === 'true') {\n    // eslint-disable-next-line no-console\n    console.info(\n      'Artificially waiting to implement the results of an ajax call. Note: This may cause a \"Warning: Can\\'t perform a React state update on an unmounted component.\" error if you navigate too quickly. '\n    );\n    await sleep(timeout);\n  }\n\n  func();\n};\n","/*\nReducers update the redux store.\n\nNOTE: This should be a separate reducer file for each subset of data to be saved in the redux store.\nThe number of subsets will vary greatly per project\n\n*/\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { dinoAPI, ajaxFinally } from '../../js/axios.config';\nimport { isLocalHost } from '../../js/whichEnv';\n\nexport type DinoType = { id: string; text: string; selected: boolean };\n\nexport type DinoState = {\n  data: DinoType[];\n  loading: boolean;\n  error: string | null;\n};\n// Record the expected initial state structure\n// exported ONLY for testing purposes - it should not be used in the actual application\nexport const initialState: DinoState = {\n  data: [],\n  loading: false,\n  error: null,\n};\n\n/* ************** Thunks *************** */\n// EXAMPLE: Side action (aka aside action with a ajax call)\nexport const loadDinos = createAsyncThunk(\n  'dinos/loadDinos',\n  async (_, { rejectWithValue }) => {\n    try {\n      const axiosConfig: AxiosRequestConfig = {\n        url: dinoAPI.url(),\n        method: dinoAPI.method(),\n      };\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const response: AxiosResponse<any> = await axios(axiosConfig);\n      await ajaxFinally();\n      return response.data[0].map((dino: string, index: number) => ({\n        id: index,\n        text: dino,\n        selected: false,\n      }));\n    } catch (err) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      return rejectWithValue(err.response.data);\n    }\n  }\n);\n\n/* *************** Slice ***************** */\nexport const DinosSlice = createSlice({\n  name: 'dinos',\n  initialState,\n  reducers: {\n    // addDino: (state, action: PayloadAction<DinoType>) => {\n    //   // not used, but keeping as an example\n    //   const newDinos = [...state.data];\n    //   newDinos.push(action.payload);\n    //   state.data = newDinos;\n    // },\n\n    // deleteDino: (state, action: PayloadAction<string>) => {\n    //   // not used, but keeping as an example\n    //   const id = action.payload;\n    //   const currentDinos = [...state.data];\n    //   const newDinos = currentDinos.filter((dino) => dino.id !== id);\n    //   state.data = newDinos;\n    // },\n\n    // EXAMPLE: Reducer (putting information into the redux store)\n    setDinoSelection: (\n      state: DinoState,\n      action: PayloadAction<{ id: string; selected: boolean }>\n    ) => {\n      const { id, selected } = action.payload;\n      const newDinos = [...state.data].map((dino) =>\n        dino.id === id ? { ...dino, selected } : dino\n      );\n      state.data = newDinos;\n    },\n\n    // NOTE this resets the state to the initial state\n    // normally this isn't used in application, but can be helpful during testing\n    resetDinoStore: () => initialState,\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(\n      loadDinos.fulfilled,\n      (state: DinoState, { payload }: { payload: DinoType[] }) => {\n        payload.forEach((dino: DinoType, index: number) => {\n          const id = `${index}`;\n          if (!state.data.some((d) => d.id === id)) {\n            state.data.push(dino);\n          }\n        });\n        state.error = null;\n        state.loading = false;\n      }\n    );\n\n    builder.addCase(loadDinos.pending, (state: DinoState) => {\n      state.loading = true;\n      state.error = null;\n    });\n\n    builder.addCase(loadDinos.rejected, (state: DinoState) => {\n      state.loading = false;\n      let error = 'There was an error loading the dinosaurs.';\n      if (isLocalHost()) {\n        error = `${error} This may most likely due that you are serving this as localhost and there is CORS restriction on the api endpoint ${dinoAPI.url()}.  Try running 'npm run start:mock' to use a mocked endpoint.`;\n      }\n      state.error = error;\n    });\n  },\n});\n\nexport const {\n  // addDino,\n  // deleteDino,\n  setDinoSelection,\n  resetDinoStore,\n} = DinosSlice.actions;\n\nexport default DinosSlice.reducer;\n","import React, { ReactElement } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\n\nimport DinoListItem from '../components/DinoListItem';\nimport DinoList from '../components/DinoList';\nimport {\n  useGetDinos,\n  useGetDinoErrors,\n  useIsDinoLoading,\n} from '../redux/selectors/dinos';\nimport Errors from '../components/Alert';\nimport Loading from '../components/Loading';\nimport { DinoType, loadDinos, setDinoSelection } from '../redux/reducers/dinos';\n\n// *** Main component ***\nconst SampleDinoPage = (): ReactElement => {\n  // EXAMPLE: Calling a selector\n  const dinos: DinoType[] = useGetDinos();\n  const error: string | null = useGetDinoErrors();\n  const loading: boolean = useIsDinoLoading();\n\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    if (dinos.length === 0) {\n      // EXAMPLE: Calling a thunk\n      dispatch(loadDinos());\n    }\n  }, [dinos, dispatch]);\n\n  const dinoList = (\n    <div>\n      <h2>Please select dinosaurs:(stored in Redux)</h2>\n\n      <ul data-testid='dinoSelectList'>\n        {dinos.map((dino) => (\n          <DinoListItem\n            testid='dinoListItem'\n            key={dino.id}\n            dinoName={dino.text}\n            dinoId={dino.id}\n            checked={dino.selected}\n            changeCheckBox={(dinoId, checked) =>\n              // EXAMPLE: Calling a reducer\n              dispatch(setDinoSelection({ id: dinoId, selected: checked }))\n            }\n          />\n        ))}\n      </ul>\n    </div>\n  );\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <h1>Dino Sample Page</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {/* EXAMPLE: Using conditional display logic (aka show if) */}\n          {!loading && error ? <Errors>{error}</Errors> : null}\n          {loading ? <Loading /> : null}\n          {!loading && !error ? (\n            <>\n              {dinoList}\n              <DinoList />\n            </>\n          ) : null}\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default SampleDinoPage;\n","// Page that shows the application name and version from package.json file\n// Along with the git commit.\n// Note this file should be used in most applications\n// Normally there isn't a need to modify it\nimport React, { ReactElement } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { FeatureFlagsReduxUI } from 'feature-flags';\nimport { useGetVersion } from '../js/getVersion';\n\nconst Version = (/* props */): ReactElement => {\n  const [version] = useGetVersion();\n\n  return (\n    <>\n      <Row data-testid='versionPageContainer'>\n        <Col>\n          <h1>Version</h1>\n          <ul>\n            <li>\n              <strong>Application Name: </strong>\n              <span id='appNameFromPackageJson'>\n                {process.env.REACT_APP_NAME}\n              </span>\n            </li>\n            <li>\n              <strong>Version: </strong>\n              <span id='appVersionFromPackageJson'>\n                {process.env.REACT_APP_VERSION}\n              </span>\n            </li>\n            <li>\n              <strong>Git Commit: </strong>\n              <span id='gitCommitHash'>{process.env.REACT_APP_GIT_SHA}</span>\n            </li>\n            <li>\n              <strong>State persists on refresh: </strong>\n              {process.env.REACT_APP_USE_LOCAL_STORAGE\n                ? process.env.REACT_APP_USE_LOCAL_STORAGE\n                : 'false'}\n            </li>\n          </ul>\n          <h2>Dependencies</h2>\n          {/* Be careful sharing what dependencies that are are in use.  You don't want to notify users of dependencies that have known security vulnerabilities */}\n          <ul>\n            <li>\n              <strong>React: </strong>\n              {React.version}\n            </li>\n            {version.bootstrap ? (\n              <li>\n                <strong>Bootstrap: </strong>\n                {version.bootstrap}\n              </li>\n            ) : null}\n            {version.featureFlags ? (\n              <li>\n                <strong>Feature Flags: </strong>\n                {version.featureFlags}\n              </li>\n            ) : null}\n          </ul>\n        </Col>\n      </Row>\n      <hr />\n      <Row>\n        <Col>\n          <h1>Feature flags</h1>\n          <p>The current status of feature flags:</p>\n          {/* EXAMPLE: List feature flags (read only) */}\n          <FeatureFlagsReduxUI readonly />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Version;\n","import React from 'react';\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\n// EXAMPLE: Custom hook\nexport const useGetVersion = (\n  getVersionsConfig: AxiosRequestConfig | null = null\n): [{ [key: string]: string }, boolean] => {\n  const [version, setVersion] = React.useState<{ [key: string]: string }>({});\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    const { CancelToken } = axios;\n    const source = CancelToken.source();\n    const getVersions = async () => {\n      try {\n        setIsLoading(true);\n        const axiosConfig = getVersionsConfig || {\n          url: '/versions.json',\n          method: 'get',\n        };\n        axiosConfig.cancelToken = source.token;\n\n        const response: AxiosResponse<{ [key: string]: string }> = await axios(\n          axiosConfig\n        );\n\n        if (response.data) {\n          setVersion(response.data);\n        } else {\n          throw Error('Uncaught Error');\n        }\n      } catch (_error) {\n        // eslint-disable-next-line no-console\n        console.error('Error finding versions file');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getVersions();\n\n    return function cleanup() {\n      source.cancel('Operation canceled by the user.');\n    };\n  }, [getVersionsConfig]);\n\n  return [version, isLoading];\n};\n","/* eslint-disable no-console */\n// EXAMPLE: Form validation page (Select colors)\n\n/*\nExample of an application that validates form input.\nIf the field is empty, no warning is shown and the submit button is inactive\nIf the field entry is invalid, a warning is shown and the submit button is inactive\nIf the field entry is valid, a confirmation message is show and the submit button is active\n*/\nimport React, { ReactElement, useState, useEffect } from 'react';\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport ROUTES from '../AppRouteNames';\nimport { useParams } from 'react-router-dom';\n\n// ** Main component type */\n\n// *** Main component ***\nconst ColorPage = (): ReactElement => {\n  const acceptedColors = ['red', 'orange', 'yellow', 'green', 'blue', 'violet'];\n\n  const colorName = useParams()?.colorName;\n\n  const [color, setColor] = useState(colorName || '');\n  const [isInvalid, setIsInvalid] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n\n  // EXAMPLE: Event listener\n  // The method is called when the text input below is changed\n  const onColorChange = (enteredColor: string): void => {\n    // EXAMPLE: Form field validation\n    if (enteredColor === '') {\n      setIsValid(false);\n      setIsInvalid(false);\n    } else if (\n      acceptedColors.some(\n        (c) => enteredColor && c === enteredColor.toLowerCase()\n      )\n    ) {\n      setIsValid(true);\n      setIsInvalid(false);\n    } else {\n      setIsValid(false);\n      setIsInvalid(true);\n    }\n    setColor(enteredColor);\n  };\n\n  useEffect(() => {\n    if (colorName) {\n      onColorChange(colorName);\n    }\n\n    // Only run on component load\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const colorButton = (): ReactElement => {\n    const button = (\n      <Button variant='success' disabled={!isValid} data-testid='homeButton'>\n        Go to homepage\n      </Button>\n    );\n\n    // EXAMPLE: Linking to a route the application (prevents page reload)\n    return isValid === true ? <Link to={ROUTES.HOME}>{button}</Link> : button;\n  };\n\n  // *** Return ***\n  return (\n    <>\n      <Row>\n        <Col>\n          <h1>Sample Form with Validation</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form.Group controlId='myColor'>\n            <Form.Label>Primary or secondary color</Form.Label>\n            {/* EXAMPLE: React-Bootstrap invalid/valid settings */}\n            <Form.Control\n              data-testid='colorTextInput'\n              type='text'\n              name='color'\n              value={color}\n              isValid={isValid}\n              isInvalid={isInvalid}\n              onChange={(event) => onColorChange(event.target.value)}\n            />\n            <Form.Control.Feedback\n              data-testid='validMessage'\n              data-valid={isValid}\n            >\n              Looks good!\n            </Form.Control.Feedback>\n            <Form.Control.Feedback\n              type='invalid'\n              data-testid='invalidMessage'\n              data-invalid={isInvalid}\n            >\n              Please enter a primary or secondary color\n            </Form.Control.Feedback>\n          </Form.Group>\n        </Col>\n      </Row>\n      <Row>\n        <Col style={{ paddingTop: '20px' }}>{colorButton()}</Col>\n      </Row>\n    </>\n  );\n};\n\nexport default ColorPage;\n","/* NOTE:\n\nThere are two ways to automatically direct a user to a given route:\n1. Use the useNavigate Hook \n2. Use Navigate component (less ideal)\n*/\n\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom'; // Needed for method 1\n// import {  Navigate, useNavigate  } from 'react-router'; // Needed for method 2\nimport { Link } from 'react-router-dom';\n\nimport ROUTES from '../AppRouteNames';\n\n// *** Main component ***\nconst RedirectPage = (): ReactElement => {\n  const navigate = useNavigate();\n  const [count, setCount] = useState(5);\n\n  useEffect(() => {\n    if (count <= 0) {\n      // EXAMPLE: Automatically forwarding to a route (without a button click)\n      // For method 1\n      return navigate(ROUTES.HOME);\n      return;\n    }\n    const timer = setInterval(() => {\n      setCount(count - 1);\n    }, 1000);\n\n    return function cleanup() {\n      clearInterval(timer);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [count]);\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <h1>Redirect</h1>\n          <p>\n            You will automatically be directed to the home page in {count}{' '}\n            seconds!\n          </p>\n          {/* Redirect component only used in method 2 */}\n          {/* {count <= 0 ? <Navigate to={ROUTES.HOME} /> : null} */}\n          <p>\n            <Link to={ROUTES.HOME}>Go to home page</Link>\n          </p>\n          <p>\n            <Button\n              onClick={() => {\n                navigate(ROUTES.HOME);\n              }}\n              data-testid='goToHomeButton'\n            >\n              Go to home page\n            </Button>\n          </p>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default RedirectPage;\n","// The purpose is to make an ajax and store state call WITHOUT redux\n// Copy what ever is done for the non-redux dinos page\nimport React, { ReactElement, useState, useEffect } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\nimport { universitiesAPI, ajaxFinally } from '../js/axios.config';\nimport Alert from '../components/Alert';\nimport Loading from '../components/Loading';\n\n// ** Main component type */\ntype UniversityType = {\n  domains?: string[];\n  name: string;\n  country?: string;\n  alpha_two_code?: string;\n  'state-province'?: string | null;\n  web_pages?: string[];\n};\n\n// EXAMPLE: Displaying result of ajax call to screen\nconst RawJSON = ({ json }: { json: string }): ReactElement => (\n  <Card>\n    <Card.Header>Returned JSON</Card.Header>\n    <Card.Body>\n      <Card.Text>{json}</Card.Text>\n    </Card.Body>\n  </Card>\n);\n\n// *** Main component ***\nconst UniversityPage = (): ReactElement => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null); // string or null\n  const [univList, setUnivList] = useState([]);\n  const [raw, setRaw] = useState<string | null>(null);\n\n  useEffect(() => {\n    const { CancelToken } = axios;\n    const source = CancelToken.source();\n    const loadUniversities = async () => {\n      setLoading(true);\n      setRaw(null);\n      setUnivList([]);\n      try {\n        //  EXAMPLE: Ajax call in non-redux file\n        const axiosConfig: AxiosRequestConfig = {\n          url: universitiesAPI.url(), // EXAMPLE: Use of Ajax url and method helper\n          method: universitiesAPI.method(),\n          cancelToken: source.token,\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const response: AxiosResponse<any> = await axios(axiosConfig);\n\n        // EXAMPLE: Use of ajaxFinally helper\n        await ajaxFinally();\n        if (response.data) {\n          const universities = response.data.map(\n            (university: UniversityType) => university.name\n          );\n          setRaw(response.data);\n          setUnivList(universities);\n          setError(null);\n        } else {\n          throw Error('Uncaught Error');\n        }\n      } catch (_error) {\n        setError('There was an error loading university names.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUniversities();\n\n    return function cleanup() {\n      source.cancel('Operation canceled by the user.');\n    };\n  }, []);\n\n  return (\n    <Col>\n      <Row>\n        <h1>Minnesota Universities</h1>\n        {loading ? <Loading /> : null}\n        {error ? <Alert>{error}</Alert> : null}\n\n        {!loading ? (\n          <ul>\n            {univList.map((university) => (\n              <li key={university} data-testid='uniListItem'>\n                {university}\n              </li>\n            ))}\n          </ul>\n        ) : null}\n        {raw ? <RawJSON json={JSON.stringify(raw)} /> : null}\n      </Row>\n    </Col>\n  );\n};\n\nexport default UniversityPage;\n","export default __webpack_public_path__ + \"static/media/page_not_found.61ba8739.svg\";","// Page rendered when url doesn't match route in App.jsx\n\nimport React, { ReactElement } from 'react';\nimport { Row, Col } from 'react-bootstrap';\n// EXAMPLE: Include an image\nimport notFoundImage from '../images/page_not_found.svg';\n\n// *** Main component ***\nconst FourOhFour = (/* props */): ReactElement => (\n  <Row data-testid='404PageContainer'>\n    <Col>\n      <h1>Page not found</h1>\n      <p>The page you requested could not be found.</p>\n      {/* EXAMPLE: Inline CSS styles */}\n      <p style={{ textAlign: 'center' }}>\n        <img src={notFoundImage} className='App-logo' alt='' />\n      </p>\n    </Col>\n  </Row>\n);\n\nexport default FourOhFour;\n","// Contains routing for entire application\n\nimport React, { ReactElement } from 'react';\nimport { Route, Routes, Navigate } from 'react-router-dom';\nimport { FeatureFlagsReduxUI } from 'feature-flags';\nimport { isProd } from './js/whichEnv';\n\nimport ROUTES from './AppRouteNames';\n\nimport Home from './pages/Home';\nimport Dino from './pages/Dino';\nimport Version from './pages/Version';\nimport Color from './pages/ColorPage';\nimport RedirectPage from './pages/RedirectPage';\nimport University from './pages/UniversityPages';\nimport FourOhFour from './pages/FourOhFour';\n\nconst AppRoutes = (): ReactElement => (\n  <>\n    <Routes>\n      <Route path={ROUTES.HOME} element={<Home />} />\n\n      {/* EXAMPLE: Route with a redirect*/}\n      <Route path='/home' element={<Navigate to={ROUTES.HOME} />} />\n\n      <Route path={ROUTES.DINO} element={<Dino />} />\n\n      {/* EXAMPLE: Route with values in url */}\n      <Route\n        // path={ROUTES.COLOR('colorName')}\n        path='/color'\n        element={<Color />}\n      >\n        <Route\n          // path={ROUTES.COLOR('colorName')}\n          path=':colorName'\n          element={<Color />}\n        />\n      </Route>\n\n      <Route path={ROUTES.REDIRECT} element={<RedirectPage />} />\n\n      {/* EXAMPLE: Route to a component without props */}\n      <Route path={ROUTES.UNIVERSITIES} element={<University />} />\n\n      <Route path={ROUTES.VERSION} element={<Version />} />\n\n      {/* EXAMPLE: Use which env methods to determine what is displayed */}\n      {!isProd() ? (\n        // EXAMPLE: Feature flag UI\n        <Route path={ROUTES.FEATURE_FLAGS} element={<FeatureFlagsReduxUI />} />\n      ) : null}\n\n      {/* EXAMPLE: Route to 404 page\n              NOTE: this needs to be the last in the switch */}\n      <Route path='*' element={<FourOhFour />} />\n    </Routes>\n  </>\n);\n\nexport default AppRoutes;\n","// NOTE This file allows you to write code that will be run before and after every ajax call\n\n/* eslint-disable no-fallthrough */\n\nimport React, { ReactElement } from 'react';\nimport axios from 'axios';\n// import { useHistory, useLocation } from 'react-router-dom';\n\n// ** Main component type */\ninterface Props {\n  clearError?: () => void;\n  setError?: (error?: string) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  testResponse?: (response: any) => void; // this is only used to test SetAxios\n  testMode?: boolean;\n}\n\n// *** Main component ***\nconst SetAxios = ({\n  clearError = () => {},\n  setError = () => {},\n  testResponse = () => {},\n  testMode = false,\n}: Props): ReactElement => {\n  // const history = useHistory(); // You can goto another route automatically = history.push(\"/mypath\")\n  // const location = useLocation(); // Route of current page = location.pathname\n\n  SetAxios.setAxiosHeaders();\n\n  axios.interceptors.request.use(\n    (config) => {\n      // Add code to be run before an ajax call is made HERE\n      clearError();\n      return config;\n    },\n    (error) => (!testMode ? Promise.reject(error) : null)\n  );\n\n  axios.interceptors.response.use(\n    (response) => {\n      // Add code to be run after a successful ajax call HERE\n      testResponse(response);\n      return response;\n    },\n    (error) => {\n      // Add code to be run after a failed ajax call HERE\n      if (error.response?.status) {\n        switch (error.response?.status) {\n          case 401:\n          //  history.push(LOGIN_ROUTE); // example to forward to another page\n          // break;\n          case 403:\n          // break;\n          case 404:\n          // break;\n          case 500:\n          // break;\n          default:\n            setError(SetAxios.UNKNOWN_ERROR);\n            break;\n        }\n      } else {\n        setError(SetAxios.UNKNOWN_ERROR);\n      }\n      return !testMode ? Promise.reject(error) : null;\n    }\n  );\n\n  return <div />;\n};\n\nSetAxios.setAxiosHeaders = (/* token */) => {\n  // Set common headers like authorization HERE\n  // axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\nSetAxios.UNKNOWN_ERROR = 'An unknown error has occurred. Please try again.';\n\nexport default SetAxios;\n","/* This tells the application to load into the html object with an id of \"root\"\nNOTE: There normally isn't a reason to change this file\n*/\n\nimport React, { ReactElement } from 'react';\nimport { persistStore } from 'redux-persist';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport { store } from './redux/store';\nimport './scss/index.scss';\n\nconst useRedux = process.env.REACT_APP_USE_REDUX === 'true';\nconst persist = process.env.REACT_APP_USE_LOCAL_STORAGE === 'true';\n\nlet RenderApp: ReactElement;\n\nif (!useRedux) {\n  RenderApp = <App />;\n} else {\n  RenderApp = (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  );\n\n  if (persist) {\n    const persistor = persistStore(store);\n\n    RenderApp = (\n      <Provider store={store}>\n        <PersistGate loading={<div>Loading...</div>} persistor={persistor}>\n          <App />\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n\nReactDOM.render(RenderApp, document.getElementById('root'));\n","// Contains routing and any application wide items like headers, footers and navigation\n\nimport React, { ReactElement } from 'react';\nimport { BrowserRouter, HashRouter } from 'react-router-dom'; // Use `HashRouter as Router` when you can't control the URL ... like GitHub pages\nimport { Container, Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Router =\n  process.env.REACT_APP_USE_HASH_ROUTER === 'true' ? HashRouter : BrowserRouter;\n\n// START FEATURE FLAGS\nimport { loadFeatureFlagsRedux, isFeatureActive } from 'feature-flags';\nimport { featureFlagArray } from './feature-flags.config';\n// END FEATURE FLAGS\n\nimport AppNavBar from './AppNavBar';\nimport AppRoutes from './AppRoutes';\nimport SetAxios from './components/SetAxios';\n\nimport './scss/index.scss';\n\nconst Header = (): ReactElement => (\n  <header>\n    <Card bg='dark' text='white'>\n      <Card.Body>\n        <Card.Title>Sample redux application</Card.Title>\n      </Card.Body>\n    </Card>\n  </header>\n);\n\nconst Footer = (): ReactElement => {\n  // EXAMPLE: Show/Hide based on feature flag\n  const isColors = useSelector((state) => isFeatureActive('COLORS', state));\n  return (\n    <footer>\n      <Card bg='light' style={{ marginTop: '20px' }}>\n        {isColors ? (\n          <>\n            <Card.Body>\n              <strong>Colors:</strong> Red, Orange, Yellow, Green, Blue, Violet\n            </Card.Body>\n          </>\n        ) : null}\n      </Card>\n    </footer>\n  );\n};\n\nconst App = (): ReactElement => {\n  // EXAMPLE: Load feature flags to redux store\n  useDispatch()(\n    loadFeatureFlagsRedux({\n      features: featureFlagArray,\n      overrides: JSON.parse(process.env.REACT_APP_FEATURE_FLAGS ?? '[]'),\n      persist:\n        process.env.REACT_APP_USE_LOCAL_STORAGE === 'true' &&\n        process.env.REACT_APP_FEATURE_FLAGS_PERSIST === 'true',\n    })\n  );\n\n  const basename = '';\n  return (\n    <>\n      <Router basename={basename}>\n        <SetAxios />\n        <Header />\n        <AppNavBar />\n        <Container>\n          <main>\n            <AppRoutes />\n          </main>\n        </Container>\n        <Footer />\n      </Router>\n    </>\n  );\n};\n\nexport default App;\n","/*\n\nReducers update the redux store.\n\nNOTE: This should be a separate reducer file for each subset of data to be saved in the redux store.\nThe number of subsets will vary greatly per project\n\n*/\n// import axios, { AxiosRequestConfig } from 'axios';\nimport {\n  createSlice,\n  createAsyncThunk /*, PayloadAction */,\n} from '@reduxjs/toolkit';\n// import { ajaxFinally } from '../../js/axios.config';\n\n// *** Data types ***\n// export type SampleItemType = string;\n\n// *** Type of the store ***\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type SampleStateType = {};\n\n// *** Initial state  ***\n// exported ONLY for testing purposes\nexport const initialState: SampleStateType = {};\n\n/* ************** Thunks *************** */\n// Enter side actions like ajax calls here\n\nexport const sampleAjaxCall = createAsyncThunk(\n  'mySampleReducer/loadingContent', // unique name - not used in the application\n  async (_, { rejectWithValue }) => {\n    try {\n      // const axiosConfig: AxiosRequestConfig = {\n      //   url: sampleAPI.url(),\n      //   method: sampleAPI.method(),\n      // };\n      // const response = await axios(axiosConfig);\n      // await ajaxFinally();\n      // return response.data; // this is the payload in the  extra reducers below\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (err: any) {\n      return rejectWithValue(err.response.data);\n    }\n  }\n);\n\n/* *************** Slice ***************** */\nexport const SampleSlice = createSlice({\n  name: 'sampleSlice', // unique name - not used in the application\n  initialState,\n  reducers: {\n    // Add new reducer to be called in the application\n    // addNewItem: (state: SampleStateType, action: PayloadAction<SampleItemType>) => {\n    //   const item = action.payload;\n    //   const newData = [...state.data];\n    //   newData.push(item);\n    //   state.data = newData;\n    // },\n\n    // NOTE this resets the state to the initial state\n    // normally this isn't used in application, but can be helpful during testing\n    resetStore: () => initialState,\n  },\n\n  extraReducers: (builder) => {\n    // Register each thunk's state (fulfilled, pending, or rejected)\n    // Ajax call successfully returns a value\n    builder.addCase(\n      sampleAjaxCall.fulfilled,\n      // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n      (state: SampleStateType, { payload }) => {}\n    );\n\n    // Ajax call has started, but response has not been received\n    // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n    builder.addCase(sampleAjaxCall.pending, (state: SampleStateType) => {});\n\n    // Ajax call returned an error\n    // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n    builder.addCase(sampleAjaxCall.rejected, (state: SampleStateType) => {});\n  },\n});\n\n// Reducers that can be called in the application\nexport const { /* addNewItem, */ resetStore } = SampleSlice.actions;\n\n// To be imported in the index reducer file\nexport default SampleSlice.reducer;\n","import { combineReducers } from 'redux';\n\nimport { featureFlagsReducers } from 'feature-flags';\nimport dinos from './dinos';\nimport sample from './REDUCER_TEMPLATE';\n\n// Add each reducer below in the combinedReducers\nexport default combineReducers({\n  dinos,\n  FeatureFlags: featureFlagsReducers,\n  sample,\n});\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n/*\nThis file creates the redux store.\nThere normally isn't a need to modify this file\n*/\n\nimport { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\n\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport storage from 'redux-persist/lib/storage';\n\nimport rootReducer from './reducers/index';\n\nconst persistConfig = {\n  key: 'root',\n  version: 1,\n  storage,\n};\nconst usePersister = process.env.REACT_APP_USE_LOCAL_STORAGE === 'true';\n\nconst persistedReducer = usePersister\n  ? persistReducer(persistConfig, rootReducer)\n  : rootReducer;\n\nexport const store = configureStore({\n  // @ts-ignore\n  reducer: persistedReducer,\n  // @ts-ignore\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport type RootState =\n  | ReturnType<typeof rootReducer>\n  | ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n"],"sourceRoot":""}